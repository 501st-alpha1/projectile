{"name":"Projectile","tagline":"Project navigation and management library for Emacs","body":"## Synopsis\r\n\r\n**Projectile** is a project interaction library for Emacs. Its goal is to\r\nprovide a nice set of features operating on a project level without\r\nintroducing external dependencies(when feasible). For instance -\r\nfinding project files has a portable implementation written in pure\r\nEmacs Lisp without the use of GNU `find`(but for performance sake an\r\nindexing mechanism backed by external commands exists as well).\r\n\r\nProjectile tries to be practical - portability is great, but if some\r\nexternal tools could speed up some task substantially and the tools\r\nare available, Projectile will leverage them.\r\n\r\nThis library provides easy project management and navigation. The\r\nconcept of a project is pretty basic - just a folder containing\r\nspecial file. Currently `git`, `mercurial`, `darcs` and `bazaar` repos\r\nare considered projects by default. So are `lein`, `maven`, `sbt`,\r\n`rebar` and `bundler` projects. If you want to mark a folder manually\r\nas a project just create an empty `.projectile` file in it. Some of\r\nProjectile's features:\r\n\r\n* jump to a file in project\r\n* jump to a directory in project\r\n* jump to a file in a directory\r\n* jump to a project buffer\r\n* jump to a test in project\r\n* toggle between code and its test\r\n* jump to recently visited files in the project\r\n* switch between projects you have worked on\r\n* kill all project buffers\r\n* replace in project\r\n* multi-occur in project buffers\r\n* grep in project\r\n* regenerate project etags\r\n* visit project in dired\r\n* run make in a project with a single key chord\r\n\r\nHere's a glimpse of Projectile in action:\r\n\r\n![Projectile Screenshot](https://github.com/bbatsov/projectile/raw/master/screenshots/projectile.png)\r\n\r\n## Installation\r\n\r\nThe recommended way to install Projectile is via MELPA or Marmalade.\r\n\r\n### Manual\r\n\r\nJust drop `projectile.el`,\r\n[dash.el](https://github.com/magnars/dash.el) and\r\n[s.el](https://github.com/magnars/s.el) somewhere in your\r\n`load-path`. I favour the folder `~/.emacs.d/vendor`:\r\n\r\n```lisp\r\n(add-to-list 'load-path \"~/emacs.d/vendor\")\r\n(require 'projectile)\r\n```\r\n\r\n### Marmalade\r\n\r\nIf you're an Emacs 24 user or you have a recent version of `package.el`\r\nyou can install Projectile from the\r\n[Marmalade](http://marmalade-repo.org/) repository.\r\n\r\n### MELPA\r\n\r\nIf you're an Emacs 24 user or you have a recent version of `package.el`\r\nyou can install Projectile from the\r\n[MELPA](http://melpa.milkbox.net) repository. The version of\r\nProjectile there will always be up-to-date, but it might be unstable\r\n(albeit rarely).\r\n\r\n### Emacs Prelude\r\n\r\nProjectile is naturally part of the\r\n[Emacs Prelude](https://github.com/bbatsov/prelude). If you're a Prelude\r\nuser - Projectile is already properly configured and ready for\r\naction.\r\n\r\n## Usage\r\n\r\n### Basic setup\r\n\r\nYou can enable Projectile globally like this:\r\n\r\n```lisp\r\n(projectile-global-mode)\r\n```\r\n\r\nTo enable Projectile only in select modes:\r\n\r\n```lisp\r\n(add-hook 'ruby-mode-hook 'projectile-on)\r\n```\r\n\r\nIf you're going to use the default `ido` completion it's\r\n**extremely highly** recommended that you install the optional\r\n[flx-ido package](https://github.com/lewang/flx), which provides a much\r\nmore powerful alternative to `ido`'s built-in `flex` matching.\r\n\r\n#### Indexing method\r\n\r\nProjectile has two modes of operation - one is portable and is\r\nimplemented in Emacs Lisp(therefore it's native to Emacs and is known\r\nas the `native indexing method`) and the other relies on external\r\ncommands like `find`, `git`, etc to obtain the list of files in a\r\nproject.\r\n\r\nSince the native indexing mode is much slower, but default the second\r\nmethod is used on all operating systems except Windows. To force the\r\nuse of native indexing:\r\n\r\n```lisp\r\n(setq projectile-indexing-method 'native)\r\n```\r\n\r\n#### Caching\r\n\r\nSince indexing a big project is not exactly quick (especially in Emacs\r\nLisp), Projectile supports caching of the project's files. The caching\r\nis enabled by default whenever native indexing is enabled.\r\n\r\nTo enable caching unconditionally use this snippet of code:\r\n\r\n```lisp\r\n(setq projectile-enable-caching t)\r\n```\r\n\r\nAt this point you can try out a Projectile command such as <kbd>C-c p f</kbd> (<kbd>M-x projectile-find-file RET</kbd>).\r\n\r\nRunning <kbd>C-u C-c p f</kbd> will invalidate the cache prior to\r\nprompting you for a file to jump to.\r\n\r\nPressing <kbd>C-c p z</kbd> will add the currently visited file to the\r\ncache for current project. Generally files created outside Emacs will\r\nbe added to the cache automatically the first time you open them.\r\n\r\nThe project cache is persistent and will be preserved during Emacs restarts.\r\n\r\n#### Using Projectile everywhere\r\n\r\nIf you want Projectile to be usable in every directory (even without the presence of project file):\r\n\r\n```lisp\r\n(setq projectile-require-project-root nil)\r\n```\r\n\r\nThis might not be a great idea if you start Projectile in your home folder for instance. :-)\r\n\r\n#### Switching projects\r\n\r\nWhen running `projectile-switch-project` (<kbd>C-c p s</kbd>) Projectile invokes the command specified in\r\n`projectile-switch-project-action` (by default it's `projectile-find-file`). If you want to use something else alter the value of\r\n`projectile-switch-project-action`:\r\n\r\n```lisp\r\n(setq projectile-switch-project-action 'projectile-dired)\r\n```\r\n\r\n#### Completion Options\r\n\r\n##### Ido\r\n\r\nBy default Projectile uses `ido` as it completion system. `ido` is\r\nextremely popular and it is built into Emacs.\r\n\r\nAs already noted above if you're going to use the `ido` completion it's\r\n**extremely highly** recommended that you install the optional\r\n[flx-ido package](https://github.com/lewang/flx), which provides a much\r\nmore powerful alternative to `ido`'s built-in `flex` matching.\r\n\r\n##### Grizzl\r\n\r\nAnother completion option is [grizzl](https://github.com/d11wtq/grizzl):\r\n\r\n```lisp\r\n(setq projectile-completion-system 'grizzl)\r\n```\r\n\r\n![Projectile Screenshot](https://github.com/bbatsov/projectile/raw/master/screenshots/projectile-grizzl.png)\r\n\r\n`grizzl`'s advantage is that it provides good fuzzy completion\r\n(compared to `ido`'s less than stellar built-in flex matching, but inferior to `ido-flx`).\r\n\r\n##### Basic (Emacs's default)\r\n\r\nIf you don't like `ido` and `grizzl` you can use regular completion:\r\n\r\n```lisp\r\n(setq projectile-completion-system 'default)\r\n```\r\n\r\nYou might want to combine default completion with `icomplete-mode` for optimum results.\r\n\r\n##### Custom Completion Function\r\n\r\nYou can also set `projectile-completion-system` to a function:\r\n\r\n```lisp\r\n(setq projectile-completion-system 'my-custom-completion-fn)\r\n(setq projectile-completion-system\r\n      (lambda (prompt choices)\r\n        ;; ...\r\n        ))\r\n```\r\n\r\nAn example of a custom completion function is\r\n[this one](https://gist.github.com/rejeep/5933343), which only show\r\nthe file name (not including path) and if the file selected is not\r\nunique, another completion with names relative to project root\r\nappears.\r\n\r\n### Interactive Commands\r\n\r\nHere's a list of the interactive Emacs Lisp functions, provided by projectile:\r\n\r\nKeybinding         | Description\r\n-------------------|------------------------------------------------------------\r\n<kbd>C-c p f</kbd> | Display a list of all files in the project. With a prefix argument it will clear the cache first.\r\n<kbd>C-c p d</kbd> | Display a list of all directories in the project. With a prefix argument it will clear the cache first.\r\n<kbd>C-c p T</kbd> | Display a list of all test files(specs, features, etc) in the project.\r\n<kbd>C-c p l</kbd> | Display a list of all files in a directory (that's not necessarily a project)\r\n<kbd>C-c p g</kbd> | Run grep on the files in the project.\r\n<kbd>C-c p b</kbd> | Display a list of all project buffers currently open.\r\n<kbd>C-c p o</kbd> | Runs `multi-occur` on all project buffers currently open.\r\n<kbd>C-c p r</kbd> | Runs interactive query-replace on all files in the projects.\r\n<kbd>C-c p i</kbd> | Invalidates the project cache (if existing).\r\n<kbd>C-c p R</kbd> | Regenerates the projects `TAGS` file.\r\n<kbd>C-c p k</kbd> | Kills all project buffers.\r\n<kbd>C-c p D</kbd> | Opens the root of the project in `dired`.\r\n<kbd>C-c p e</kbd> | Shows a list of recently visited project files.\r\n<kbd>C-c p a</kbd> | Runs `ack` on the project. Requires the presence of `ack-and-a-half`.\r\n<kbd>C-c p c</kbd> | Runs a standard compilation command for your type of project.\r\n<kbd>C-c p p</kbd> | Runs a standard test command for your type of project.\r\n<kbd>C-c p z</kbd> | Adds the currently visited to the cache.\r\n<kbd>C-c p s</kbd> | Display a list of known projects you can switch to.\r\n\r\nIf you ever forget any of Projectile's keybindings just do a:\r\n\r\n<kbd>C-c p C-h</kbd>\r\n\r\nYou can change the default keymap prefix `C-c p` like this:\r\n\r\n```lisp\r\n(setq projectile-keymap-prefix (kbd \"C-c C-p\"))\r\n```\r\n\r\nFor some common commands you might want to take a little shortcut and\r\nleverage the fairly unused `Super` key (by default `Command` on Mac\r\nkeyboards and `Windows` on Win keyboards). Here's something you can\r\nadd to your Emacs config:\r\n\r\n```lisp\r\n(define-key projectile-mode-map [?\\s-d] 'projectile-find-dir)\r\n(define-key projectile-mode-map [?\\s-p] 'projectile-switch-project)\r\n(define-key projectile-mode-map [?\\s-f] 'projectile-find-file)\r\n(define-key projectile-mode-map [?\\s-g] 'projectile-grep)\r\n```\r\n\r\nNote that the `Super` keybindings are not usable in Windows. Emacs\r\nPrelude already adds those extra keybindings.\r\n\r\n### Ignoring files\r\n\r\nIf you'd like to instruct Projectile to ignore certain files in a\r\nproject, when indexing it you can do so in the `.projectile` file by\r\nadding each path to ignore, where the paths all are relative to the\r\nroot directory and start with a slash. Everything ignored should be\r\npreceded with a - sign. Alternatively, not having any prefix at all\r\nalso means to ignore the directory or file pattern that follows.\r\nHere's an example for a typical Rails application:\r\n\r\n```\r\n-/log\r\n-/tmp\r\n-/vendor\r\n-/public/uploads\r\n```\r\n\r\nThis would ignore the folders only at the root of the project.\r\nProjectile also supports relative pathname ignores:\r\n\r\n```\r\n-tmp\r\n-*.rb\r\n-*.yml\r\n-models\r\n```\r\n\r\nYou can also ignore everything except certain subdirectories. This is\r\nuseful when selecting the directories to keep is easier than selecting\r\nthe directories to ignore, although you can do both. To select\r\ndirectories to keep, that means everything else will be ignored.\r\n\r\nExample:\r\n\r\n```\r\n+/src/foo\r\n+/tests/foo\r\n```\r\n\r\nKeep in mind that you can only include subdirectories, not file\r\npatterns.\r\n\r\nIf both directories to keep and ignore are specified, the directories\r\nto keep first apply, restricting what files are considered. The paths\r\nand patterns to ignore are then applied to that set.\r\n\r\n### Helm Integration\r\n\r\nProjectile can be integrated with\r\n[Helm](https://github.com/emacs-helm/helm) via\r\n`helm-c-source-projectile` source (available in `helm-projectile.el`). There is also an example function\r\nfor calling Helm with the Projectile file source. You can call it like\r\nthis:\r\n\r\n```\r\nM-x helm-projectile\r\n```\r\n\r\nor even better - bind it to a keybinding like this:\r\n\r\n```lisp\r\n(global-set-key (kbd \"C-c h\") 'helm-projectile)\r\n```\r\n\r\nObviously you need to have Helm installed for this to work :-)\r\n\r\n![Helm-Projectile Screenshot](https://github.com/bbatsov/projectile/raw/master/screenshots/helm-projectile.png)\r\n\r\n## Caveats\r\n\r\n* Traversing the project directory programmatically (instead of using\r\n  something like GNU find) is not very fast. On the other hand - it's\r\n  portable. Unlike\r\n  [find-file-in-project](https://github.com/bbatsov/find-file-in-project),\r\n  projectile's jump-to-file will work on any OS.\r\n* Some operations like search(grep) depend (presently) on external\r\n  utilities such as `find`.\r\n\r\n## Would you like to know more?\r\n\r\nCheck out the [Projectile's project page](http://batsov.com/projectile).\r\n\r\n## Known issues\r\n\r\nCheck out the project's\r\n[issue list](https://github.com/bbatsov/projectile/issues?sort=created&direction=desc&state=open)\r\na list of unresolved issues. By the way - feel free to fix any of them\r\nand sent me a pull request. :-)\r\n\r\n## Contributors\r\n\r\nHere's a [list](https://github.com/bbatsov/projectile/contributors) of all the people who have contributed to the\r\ndevelopment of Projectile.\r\n\r\n## Contribution\r\n\r\nAll contributions are welcome, as long as they don't break anything\r\n:-) To make sure you didn't introduce any regressions it's a good idea\r\nto run the tests first.\r\n\r\nInstall [cask](https://github.com/rejeep/cask.el) if you haven't\r\nalready, then:\r\n\r\n```bash\r\n$ cd /path/to/projectile\r\n$ cask\r\n```\r\n\r\nRun all tests with:\r\n\r\n```bash\r\n$ make test\r\n```\r\n\r\n## Changelog\r\n\r\nA fairly extensive changelog is available [here](CHANGELOG.md).\r\n\r\n## Bugs & Improvements\r\n\r\nBug reports and suggestions for improvements are always\r\nwelcome. GitHub pull requests are even better! :-)\r\n\r\nTogether we can create the ultimate project management tool for Emacs.\r\n\r\nCheers,<br/>\r\n[Bozhidar](https://twitter.com/bbatsov)\r\n","google":"UA-22917580-1","note":"Don't delete this file! It's used internally to help with page regeneration."}